openapi: 3.1.0
info:
  title: Users API
  description: API para la gesti칩n de usuarios.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: "1.0"
servers:
  - url: http://localhost:8080
    description: Generated server url
tags:
  - name: Usuarios
    description: CRUD de usuarios
paths:
  /api/v1/users/{id}:
    get:
      tags:
        - Usuarios
      summary: Obtener un usuario por ID
      description: Busca un usuario por su UUID.
      operationId: findUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: ID no v치lido
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "200":
          description: Usuario encontrado
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "404":
          description: Usuario no encontrado
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
    put:
      tags:
        - Usuarios
      summary: Actualizar un usuario
      description: Modifica los datos de un usuario existente.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
        required: true
      responses:
        "400":
          description: ID no v치lido
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "200":
          description: Usuario actualizado
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "404":
          description: Usuario no encontrado
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
    delete:
      tags:
        - Usuarios
      summary: Eliminar un usuario
      description: Elimina un usuario por su ID.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "400":
          description: ID no v치lido
        "404":
          description: Usuario no encontrado
        "204":
          description: Usuario eliminado
  /api/v1/users:
    get:
      tags:
        - Usuarios
      summary: Obtener todos los usuarios
      description: Devuelve la lista de todos los usuarios registrados.
      operationId: getAllUsers
      responses:
        "204":
          description: No hay usuarios registrados
          content:
            "*/*":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponseDto"
        "200":
          description: Lista de usuarios
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
    post:
      tags:
        - Usuarios
      summary: Crear un usuario
      description: Registra un nuevo usuario en el sistema.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestDto"
        required: true
      responses:
        "200":
          description: Usuario creado exitosamente
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        "400":
          description: Error en la solicitud
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/UserResponseDto"
components:
  schemas:
    UpdateUserRequestDto:
      type: object
      properties:
        rut:
          type: string
          pattern: "^\\d{7,8}-[0-9kK]{1}$"
        nombres:
          type: string
          maxLength: 50
          minLength: 3
        apellidos:
          type: string
          maxLength: 50
          minLength: 3
        fechaNacimiento:
          type: string
          format: date
        correoElectronico:
          type: string
        contrasena:
          type: string
          maxLength: 2147483647
          minLength: 8
      required:
        - contrasena
    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rut:
          type: string
        nombres:
          type: string
        apellidos:
          type: string
        fechaNacimiento:
          type: string
          format: date
        correoElectronico:
          type: string
        creadoEn:
          type: string
          format: date-time
        actualizadoEn:
          type: string
          format: date-time
    CreateUserRequestDto:
      type: object
      properties:
        rut:
          type: string
          pattern: "^\\d{7,8}-[0-9kK]{1}$"
        nombres:
          type: string
          maxLength: 50
          minLength: 2
        apellidos:
          type: string
          maxLength: 50
          minLength: 2
        fechaNacimiento:
          type: string
          format: date
        correoElectronico:
          type: string
        contrasena:
          type: string
          maxLength: 2147483647
          minLength: 8
      required:
        - apellidos
        - contrasena
        - correoElectronico
        - fechaNacimiento
        - nombres
